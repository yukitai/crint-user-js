export const opcode_constant = [
    "text",
    "note",
    "matrix",
    "math_number",
    "math_whole_number",
    "operator_add",
    "operator_subtract",
    "operator_multiply",
    "operator_divide",
    "operator_gt",
    "operator_lt",
    "operator_equals",
    "operator_and",
    "operator_or",
    "operator_not",
    "operator_join",
    "operator_letter_of",
    "operator_length",
    "operator_contains",
    "operator_mod",
    "operator_round",
]

// @todo: use Scratch's implemention
export const opcode_func_map = {
    "text": ({TEXT}) => String(TEXT),
    "note": ({NOTE}) => NOTE,
    "matrix": ({MATRIX}) => MATRIX,
    "math_number": ({NUM}) => Number(NUM),
    "math_whole_number": ({NUM}) => Number(NUM),
    "operator_add": ({NUM1, NUM2}) => Number(NUM1) + Number(NUM2),
    "operator_subtract": ({NUM1, NUM2}) => Number(NUM1) - Number(NUM2),
    "operator_multiply": ({NUM1, NUM2}) => Number(NUM1) * Number(NUM2),
    "operator_divide": ({NUM1, NUM2}) => Number(NUM1) / Number(NUM2),
    "operator_gt": ({OPERAND1, OPERAND2}) => OPERAND1 > OPERAND2,
    "operator_lt": ({OPERAND1, OPERAND2}) => OPERAND1 < OPERAND2,
    "operator_equals": ({OPERAND1, OPERAND2}) => OPERAND1 === OPERAND2,
    "operator_and": ({OPERAND1, OPERAND2}) => Boolean(OPERAND1) && Boolean(OPERAND2),
    "operator_or": ({OPERAND1, OPERAND2}) => Boolean(OPERAND1) || Boolean(OPERAND2),
    "operator_not": ({OPERAND}) => !Boolean(OPERAND),
    "operator_join": ({STRING1, STRING2}) => String(STRING1) + String(STRING2),
    "operator_letter_of": ({LETTER, STRING}) => String(STRING)[Math.floor(Number(LETTER))],
    "operator_length": ({STRING}) => String(STRING).length,
    "operator_contains": ({STRING1, STRING2}) => String(STRING1).indexOf(String(STRING2)) !== -1,
    "operator_mod": ({NUM1, NUM2}) => Number(NUM1) % Number(NUM2),
    "operator_round": ({NUM}) => Math.round(Number(NUM)),
}